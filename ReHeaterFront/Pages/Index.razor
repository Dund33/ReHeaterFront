@page "/"
@using System.Web
@using System.Globalization
@inject HttpClient Client

<style>
    .slidecontainer {
        width: 100%; /* Width of the outside container */
    }

    /* The slider itself */

    .slider {
        -webkit-appearance: none; /* Override default CSS styles */
        -webkit-transition: .2s; /* 0.2 seconds transition on hover */
        appearance: none;
        background: #d3d3d3; /* Grey background */
        height: 25px; /* Specified height */
        opacity: 0.7; /* Set transparency (for mouse-over effects on hover) */
        outline: none; /* Remove outline */
        transition: opacity .2s;
        width: 100%; /* Full-width */
    }

    /* Mouse-over effects */

    .slider:hover {
        opacity: 1; /* Fully shown on mouse-over */
    }

    /* The slider handle (use -webkit- (Chrome, Opera, Safari, Edge) and -moz- (Firefox) to override default look) */

    .slider::-webkit-slider-thumb {
        -webkit-appearance: none; /* Override default look */
        appearance: none;
        background: #F0A96B; /* Green background */
        cursor: pointer; /* Cursor on hover */
        height: 25px; /* Slider handle height */
        width: 25px; /* Set a specific slider handle width */
    }

    .slider::-moz-range-thumb {
        background: #4CAF50; /* Green background */
        cursor: pointer; /* Cursor on hover */
        height: 25px; /* Slider handle height */
        width: 25px; /* Set a specific slider handle width */
    }
</style>
<link rel="shortcut icon" href="favicon.png">



<div class="slidecontainer">
    <input @bind="HeaterPower" type="range" min="1" max="5000" step="1" class="slider" id="power">
    Heater power @HeaterPower Watts
    <hr class="fading-line">
    <input @bind="Area" type="range" min="1" max="250" step="1" class="slider" id="area">
    Area: @Area m^2
    <hr class="fading-line">
    <input @bind="TargetTemp" type="range" min="1" max="50" step="1" class="slider" id="targetTemp">
    Target temperature: @TargetTemp C
    <hr class="fading-line">
    <input @bind="OutsideTemp" type="range" min="1" max="50" step="1" class="slider" id="outsideTemp">
    Temperature outside: @OutsideTemp C
    <hr class="fading-line">
    <input @bind="StartTemp" type="range" min="1" max="50" step="1" class="slider" id="startTemp">
    Current temperature: @StartTemp C
    <hr class="fading-line">

</div>

<div>
    <button class="btn-success" @onclick="SendDataToAPI">Predict</button>
</div>

<div class="jumbotron align-content-center">
    Predicted power is @PredictedSetting Watts
    That would be somewhere around @PowerPercent % of your heater's power
</div>

@code{

    public async Task SendDataToAPI()
    {
        var request = new HttpRequestMessage();
        var builder = new UriBuilder("https://192.168.1.165/api/Temperature");
        builder.Port = 5001;
        var query = HttpUtility.ParseQueryString(builder.Query);
        query["roomArea"] = Convert.ToString(Area, CultureInfo.InvariantCulture);
        query["targetTemp"] = Convert.ToString(TargetTemp, CultureInfo.InvariantCulture);
        query["roomId"] = "0";
        query["outsideTemp"] = OutsideTemp.ToString();
        query["startTemp"] = StartTemp.ToString();
        builder.Query = query.ToString();
        var url = builder.ToString();
        var output = await Client.GetFromJsonAsync<ModelOutput>(url);
        PredictedSetting = output.Score;
    }

    private float HeaterPower { get; set; }
    public float Area { get; set; }
    public float OutsideTemp { get; set; }
    public float TargetTemp { get; set; }
    public double PredictedSetting { get; set; }
    public float StartTemp { get; set; }
    public double PowerPercent => Math.Round(PredictedSetting / HeaterPower * 100);
}